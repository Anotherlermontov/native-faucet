<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Combined Components</title>

    <link rel="stylesheet" href="{{ url_for('static', filename='css/nav_bar.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/use_account_identifier.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/chain_selector_row.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/wallet_model.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/swap_page.css') }}">

    <script src ="{{ url_for('static', filename='js/nav_bar.js') }}"></script>
    <script src ="{{ url_for('static', filename='js/use_account_identifier.js') }}"></script>
    <script src ="{{ url_for('static', filename='js/chain_selector_row.js') }}"></script>
    <script src ="{{ url_for('static', filename='js/wallet_model.js') }}"></script>

    <style>
        .token-select-wrapper {
            display: flex;
            align-items: center;
            gap: 10px;
            width: 100%;
        }

        .token-select {
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: var(--surface1);
            border-radius: 16px;
            padding: 8px 12px;
            cursor: pointer;
            position: relative;
        }

        .token-amount-input {
            width: 100%;
            font-size: 2rem; /* Increase the font size for larger numbers */
            padding: 10px;
            border: none; /* Remove the border to match the background */
            border-radius: 8px;
            outline: none;
            background-color: inherit; /* Match the input background with the swap window background */
            color: var(--neutral1);
            text-align: left; /* Align text to the left edge */
            transition: border-color 0.2s ease;
        }

        .token-amount-input:focus {
            border-color: var(--accent1); /* Add a focus border color if needed */
        }

        .token-amount-input::placeholder {
            color: var(--neutral3);
            text-align: left; /* Ensure the placeholder text is also left-aligned */
        }

        .token-amount-input:invalid {
            border-color: var(--critical);
        }
    </style>
</head>
<body>
    <!-- Navbar Component -->
    <nav class="nav">
        <div class="nav-contents">
            <div class="left">
                <!-- Company Menu Placeholder -->
                <div>Company Menu</div>
                <!-- Tabs Placeholder -->
                <div>Tabs</div>
            </div>
            <div class="row">
                <!-- Preference Menu Placeholder -->
                <div>Preferences</div>
                <!-- Chain Selector Placeholder -->
                <div id="chain-selector">
                    <button id="chain-selector-button">
                        <img id="chain-logo" src="" alt="Chain Logo" width="20" height="20">
                    </button>
                    <div id="chain-dropdown" class="dropdown-content">
                        <div id="supported-chains"></div>
                        <div id="unsupported-chains"></div>
                    </div>
                </div>
                <!-- Web3 Status Placeholder -->
                <div id="web3-status"></div>
            </div>
        </div>
    </nav>

    <!-- NavIcon Component -->
    <div class="container" id="nav-icon" aria-label="Navigation Button" onclick="onclickNavIcon()">
        <!-- Icon Content -->
        <span>Icon</span>
    </div>

    <!-- Bag Component -->
    <div class="container" id="bag-icon" onclick="onclickBagIcon()">
        <!-- Bag Icon Placeholder -->
        <span>Bag Icon</span>
        <div class="counter-dot" id="counter-dot">5</div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Swap Page Content Scoped -->
        <div class="swap-page">
            <div class="page-wrapper">
                <div class="swap-wrapper" id="swap-page">
                    <div class="swap-form" id="swap-form">
                        <form>
                            <div class="loading-wrapper">
                                <div class="title-column">
                                    <h2>Swap</h2>
                                </div>
                                <div class="input-column">
                                    <div class="row">
                                        <!-- Token Selector and Amount Input -->
                                        <div class="token-select-wrapper">
                                            <input
                                                type="text"
                                                id="token-amount"
                                                class="token-amount-input"
                                                inputmode="decimal"
                                                autocomplete="off"
                                                autocorrect="off"
                                                pattern="^[0-9]*[.,]?[0-9]*$"
                                                placeholder="0"
                                                minlength="1"
                                                maxlength="79"
                                                spellcheck="false"
                                                value="">
                                            <div class="token-select">
                                                <img id="token-logo" src="/static/images/logos/assets/usdc-logo.png" alt="Token Logo" width="20" height="20">
                                                <span id="token-symbol">USDC</span>
                                            </div>
                                        </div>
                                        {# <div class="module-blob" style="width: 60px;"></div>
                                        <div class="module-blob" style="width: 100px; border-radius: 16px;"></div> #}
                                    </div>
                                </div>
                                <div class="output-wrapper">
                                    <div class="arrow-wrapper">
                                        <div class="arrow-container">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--neutral3)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-down">
                                                <line x1="12" y1="5" x2="12" y2="19"/>
                                                <polyline points="19 12 12 19 5 12"/>
                                            </svg>
                                        </div>
                                    </div>
                                    <div class="input-column">
                                        <div class="row">
                                            <div class="token-select-wrapper">
                                                <input
                                                    type="text"
                                                    id="token-amount-output"
                                                    class="token-amount-input"
                                                    inputmode="decimal"
                                                    autocomplete="off"
                                                    autocorrect="off"
                                                    pattern="^[0-9]*[.,]?[0-9]*$"
                                                    placeholder="0"
                                                    minlength="1"
                                                    maxlength="79"
                                                    spellcheck="false"
                                                    value=""
                                                >
                                                <div class="token-select">
                                                    <img id="token-logo-output" src="/static/images/logos/assets/eth-logo.png" alt="Token Logo" width="20" height="20">
                                                    <span id="token-symbol-output">ETH</span>
                                                </div>
                                            </div>
                                            {# <div class="module-blob" style="width: 60px;"></div>
                                            <div class="module-blob" style="width: 100px; border-radius: 16px;"></div> #}
                                        </div>
                                    </div>
                                </div>
                                <div class="blob" style="border-radius: 16px;"></div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- New functionality -->
    <div id="choose-wallet-wrapper">
        <div class="wrapper" data-testid="wallet-modal">
            <div class="connection-error-view"></div>
            <div class="auto-row" style="justify-content: space-between; width: 100%;">
                <div class="sub-header">Connect a wallet</div>
                <button class="icon-button" data-testid="wallet-settings" onclick="openSettings()">
                    <img src="{{ url_for('static', filename='settings-icon.png') }}" alt="Settings Icon" />
                </button>
            </div>
            <div class="column" style="gap: 16px;">
                <div class="column" style="gap: 16px; flex: 1;">
                    <div class="row" style="flex: 1; align-items: flex-start;">
                        <div class="option-grid" data-testid="option-grid">
                            <!-- Options will be dynamically populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const optionGrid = document.querySelector(".option-grid");

            const connectors = [
                { id: '1', name: 'MetaMask', icon: '/static/images/logos/metamask-icon.svg' },
            ];

            connectors.forEach(connector => {
                const optionWrapper = document.createElement("div");
                optionWrapper.className = `option-container ${isIFramed() ? 'disabled' : ''}`;

                const optionCardClickable = document.createElement("button");
                optionCardClickable.className = "option-card-clickable";
                optionCardClickable.onclick = () => connect(connector.id);
                optionCardClickable.innerHTML = `
                    <div class="option-card-left">
                        <div class="icon-wrapper">
                            <img src="${connector.icon}" alt="${connector.name}" />
                        </div>
                        <div class="header-text">${connector.name}</div>
                    </div>
                `;

                optionWrapper.appendChild(optionCardClickable);
                optionGrid.appendChild(optionWrapper);
            });
        });

        {# document.getElementById('web3-status').appendChild(Web3Status()); #}

        document.getElementById('chain-selector-button').addEventListener('click', () => {
            document.getElementById('chain-dropdown').classList.toggle('show');
        });
        document.addEventListener("DOMContentLoaded", function () {
        const web3StatusContainer = document.getElementById('web3-status');
        web3StatusContainer.appendChild(Web3Status());
    });
    document.addEventListener("DOMContentLoaded", function () {;
        const tokenSymbol = document.getElementById('token-symbol');
        const tokenLogo = document.getElementById('token-logo');
        const tokenAmountInput = document.getElementById('token-amount');

        // Handle token amount input
        tokenAmountInput.addEventListener('input', (event) => {
            const value = event.target.value;
            // Logic to handle input value change
            console.log('Amount input:', value);
        });
    });
    document.addEventListener("DOMContentLoaded", function() {
        const tokenAmountInput = document.getElementById('token-amount');

        tokenAmountInput.addEventListener('input', (event) => {
            let value = event.target.value;

            value = value.replace('.', ',');

            // Remove invalid characters
            value = value.replace(/[^0-9,]/g, '');

            // Ensure only one decimal point
            const parts = value.split(',');
            if (parts.length > 2) {
                value = `${parts[0]}.${parts.slice(1).join('')}`;
            }

            // Limit decimal places to two
            if (parts[1] && parts[1].length > 2) {
                value = `${parts[0]}.${parts[1].slice(0, 2)}`;
            }

            // Update the input field with the formatted value
            event.target.value = value;
        });

        tokenAmountInput.addEventListener('blur', () => {
            const value = tokenAmountInput.value;
            if (value === '' || value === '0' || isNaN(parseFloat(value))) {
                tokenAmountInput.value = '';
            }
        });
    });
    document.addEventListener("DOMContentLoaded", function() {
        const tokenAmountOut = document.getElementById('token-amount-output');

        tokenAmountOut.addEventListener('input', (event) => {
            let value = event.target.value;

            value = value.replace('.', ',');

            // Remove invalid characters
            value = value.replace(/[^0-9,]/g, '');

            // Ensure only one decimal point
            const parts = value.split(',');
            if (parts.length > 2) {
                value = `${parts[0]}.${parts.slice(1).join('')}`;
            }

            // Limit decimal places to two
            if (parts[1] && parts[1].length > 2) {
                value = `${parts[0]}.${parts[1].slice(0, 2)}`;
            }

            // Update the input field with the formatted value
            event.target.value = value;
        });

        tokenAmountOut.addEventListener('blur', () => {
            const value = tokenAmountOut.value;
            if (value === '' || value === '0' || isNaN(parseFloat(value))) {
                tokenAmountOut.value = '';
            }
        });
    });
    </script>
</body>
</html>
