<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Combined Components</title>

    <link rel="stylesheet" href="{{ url_for('static', filename='css/nav_bar.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/use_account_identifier.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/chain_selector_row.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/wallet_model.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/swap_page.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/token_select.css') }}">

    <script src ="{{ url_for('static', filename='js/nav_bar.js') }}"></script>
    <script src ="{{ url_for('static', filename='js/use_account_identifier.js') }}"></script>
    <script src ="{{ url_for('static', filename='js/chain_selector_row.js') }}"></script>
    <script src ="{{ url_for('static', filename='js/wallet_model.js') }}"></script>
    <script src ="{{ url_for('static', filename='js/token_select.js') }}"></script>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>

    <style>
        .swap-button {
            background-color: #54c898; /* Green background */
            border: none;
            color: white;
            padding: 12px 20px;
            text-align: center;
            text-decoration: none;
            font-size: 16px;
            cursor: pointer;
            border-radius: inherit;
            width: 100%;
            height: 100%;
        }

        .swap-button:hover {
            background-color: #39a176; /* Darker green on hover */
        }

        /* The modal (background) */
        .modal2 {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            background-color: rgba(0, 0, 0, 0.5); /* Black background with transparency */
        }

        /* Modal content */
        .modal2-content {
            background-color: white;
            margin: 15% auto; /* Center it vertically and horizontally */
            padding: 20px;
            border-radius: 8px;
            width: 80%; /* Could be more or less, depending on screen size */
            max-width: 500px;
            text-align: center;
        }

        /* Close button */
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Email input field */
        #email-input {
            width: 80%;
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            border: 1px solid #ccc;
            font-size: 16px;
        }

        /* Submit button */
        .submit-email-button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            text-align: center;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }

        .submit-email-button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <!-- Navbar Component -->
    <nav class="nav">
        <div class="nav-contents">
            <div class="left">
                <!-- Company Menu Placeholder -->
                <div>Company Menu</div>
                <!-- Tabs Placeholder -->
                <div>Tabs</div>
            </div>
            <div class="row">
                <!-- Preference Menu Placeholder -->
                <div>Preferences</div>
                <!-- Chain Selector Placeholder -->
                <div id="chain-selector">
                    <button id="chain-selector-button">
                        <img id="chain-logo" src="" alt="Chain Logo" width="20" height="20">
                    </button>
                    <div id="chain-dropdown" class="dropdown-content">
                        <div id="supported-chains"></div>
                        <div id="unsupported-chains"></div>
                    </div>
                </div>
                <!-- Web3 Status Placeholder -->
                <div id="web3-status"></div>
            </div>
        </div>
    </nav>

    <!-- NavIcon Component -->
    <div class="container" id="nav-icon" aria-label="Navigation Button" onclick="onclickNavIcon()">
        <!-- Icon Content -->
        <span>Icon</span>
    </div>

    <!-- Bag Component -->
    <div class="container" id="bag-icon" onclick="onclickBagIcon()">
        <!-- Bag Icon Placeholder -->
        <span>Bag Icon</span>
        <div class="counter-dot" id="counter-dot">5</div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Swap Page Content Scoped -->
        <div class="swap-page">
            <div class="page-wrapper">
                <div class="swap-wrapper" id="swap-page">
                    <div class="swap-form" id="swap-form">
                        <form>
                            <div class="loading-wrapper">
                                <div class="title-column">
                                    <h2>Swap</h2>
                                </div>
                                <div class="input-column">
                                    <div class="row">
                                        <!-- Token Selector and Amount Input -->
                                        <div class="token-select-wrapper">
                                            <input
                                                type="text"
                                                id="token-amount"
                                                class="token-amount-input"
                                                inputmode="decimal"
                                                autocomplete="off"
                                                autocorrect="off"
                                                pattern="^[0-9]*[.,]?[0-9]*$"
                                                placeholder="0"
                                                minlength="1"
                                                maxlength="79"
                                                spellcheck="false"
                                                value="">
                                            <div class="token-select">
                                                <img id="token-logo" src="/static/images/logos/assets/usdc-logo.png" alt="Token Logo" width="20" height="20">
                                                <span id="token-symbol">USDC</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="output-wrapper">
                                    <div class="arrow-wrapper">
                                        <div class="arrow-container">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--neutral3)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-down">
                                                <line x1="12" y1="5" x2="12" y2="19"/>
                                                <polyline points="19 12 12 19 5 12"/>
                                            </svg>
                                        </div>
                                    </div>
                                    <div class="input-column">
                                        <div class="row">
                                            <div class="token-select-wrapper">
                                                <input
                                                    type="text"
                                                    id="token-amount-output"
                                                    class="token-amount-input"
                                                    inputmode="decimal"
                                                    autocomplete="off"
                                                    autocorrect="off"
                                                    pattern="^[0-9]*[.,]?[0-9]*$"
                                                    placeholder="0"
                                                    minlength="1"
                                                    maxlength="79"
                                                    spellcheck="false"
                                                    value=""
                                                >
                                                <div class="token-select">
                                                    <img id="token-logo-output" src="/static/images/logos/assets/eth-logo.png" alt="Token Logo" width="20" height="20">
                                                    <span id="token-symbol-output">ETH</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="blob" style="border-radius: 16px;">
                                <button id="swap-button" type="button" class="swap-button", onclick="performSwap()">Swap</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- New functionality -->
    <div id="choose-wallet-wrapper">
        <div class="wrapper" data-testid="wallet-modal">
            <div class="connection-error-view"></div>
            <div class="auto-row" style="justify-content: space-between; width: 100%;">
                <div class="sub-header">Connect a wallet</div>
                <button class="icon-button" data-testid="wallet-settings" onclick="openSettings()">
                    <img src="{{ url_for('static', filename='settings-icon.png') }}" alt="Settings Icon" />
                </button>
            </div>
            <div class="column" style="gap: 16px;">
                <div class="column" style="gap: 16px; flex: 1;">
                    <div class="row" style="flex: 1; align-items: flex-start;">
                        <div class="option-grid" data-testid="option-grid">
                            <!-- Options will be dynamically populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="modal-message" class="modal2">
        <div class="modal2-content">
            <span class="close-button" onclick="closeModal()">&times;</span>
            <h2>Service Coming Soon!</h2>
            <p>The project is not ready yet, but we are working hard on it and will launch soon. Leave us your email, and we will contact you as soon as the service is ready.</p>

            <label for="email-input">Your Email:</label>
            <input type="email" id="email-input" placeholder="Enter your email" required>

            <button class="submit-email-button" onclick="submitEmail()">Submit</button>
        </div>
    </div>
    <script>
        function performSwap() {
            // Show modal when button is clicked
            document.getElementById('modal-message').style.display = 'block';
        }

        function closeModal() {
            // Close the modal
            document.getElementById('modal-message').style.display = 'none';
        }

        function submitEmail() {
            const email = document.getElementById('email-input').value;
            if (validateEmail(email)) {
                alert(`Thank you! We will notify you at ${email} when the service is ready.`);
                closeModal();
                // Here, you could also add code to send the email to your backend.
            } else {
                alert('Please enter a valid email address.');
            }
        }

        // Email validation function
        function validateEmail(email) {
            const re = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/;
            return re.test(String(email).toLowerCase());
        }

        const PAIR_ADDRESS = "0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc";
        const PAIR_ABI = [
            {
                "constant": true,
                "inputs": [],
                "name": "getReserves",
                "outputs": [
                    {
                        "internalType": "uint112",
                        "name": "_reserve0",
                        "type": "uint112"
                    },
                    {
                        "internalType": "uint112",
                        "name": "_reserve1",
                        "type": "uint112"
                    },
                    {
                        "internalType": "uint32",
                        "name": "_blockTimestampLast",
                        "type": "uint32"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ];
        const WEB3 = new Web3(new Web3.providers.HttpProvider('https://eth.llamarpc.com'));
        const PAIR_CONTRACT = new WEB3.eth.Contract(PAIR_ABI, PAIR_ADDRESS);
        let RESERVE0 = null;
        let RESERVE1 = null;
        document.addEventListener("DOMContentLoaded", function () {
            const optionGrid = document.querySelector(".option-grid");

            const connectors = [
                { id: '1', name: 'MetaMask', icon: '/static/images/logos/metamask-icon.svg' },
            ];

            connectors.forEach(connector => {
                const optionWrapper = document.createElement("div");
                optionWrapper.className = `option-container ${isIFramed() ? 'disabled' : ''}`;

                const optionCardClickable = document.createElement("button");
                optionCardClickable.className = "option-card-clickable";
                optionCardClickable.onclick = () => connect(connector.id);
                optionCardClickable.innerHTML = `
                    <div class="option-card-left">
                        <div class="icon-wrapper">
                            <img src="${connector.icon}" alt="${connector.name}" />
                        </div>
                        <div class="header-text">${connector.name}</div>
                    </div>
                `;

                optionWrapper.appendChild(optionCardClickable);
                optionGrid.appendChild(optionWrapper);
            });
        });

        {# document.getElementById('web3-status').appendChild(Web3Status()); #}

        document.getElementById('chain-selector-button').addEventListener('click', () => {
            document.getElementById('chain-dropdown').classList.toggle('show');
        });
        document.addEventListener("DOMContentLoaded", function () {
            const web3StatusContainer = document.getElementById('web3-status');
            web3StatusContainer.appendChild(Web3Status());
        });
        document.addEventListener("DOMContentLoaded", formatAmountInput(6, true));
        document.addEventListener("DOMContentLoaded", formatAmountInput(18, false));

        document.addEventListener('DOMContentLoaded', async function () {
            if (RESERVE0 === null || RESERVE1 === null) {
                const reserves = await PAIR_CONTRACT.methods.getReserves().call();
                RESERVE0 = Number(reserves['_reserve0']) / 1e6;
                RESERVE1 = Number(reserves['_reserve1']) / 1e18;
            }

            // Automatically update converted amount when the input value changes
            const amountInput = document.getElementById('token-amount');
            const amountOutput = document.getElementById('token-amount-output');

            async function updateConvertedInputAmount() {
                let ethPrice = RESERVE0 / RESERVE1;
                let amountOutputValue = amountOutput.value.replace(/,/g, '.');
                if (amountOutputValue === '') {
                    amountInput.value = '';
                }
                else if (amountOutputValue === '0') {
                    amountInput.value = '0';
                }
                else {
                    let amount = (parseFloat(amountOutputValue) * ethPrice).toFixed(6);
                    if (amount == 0) {
                        amountInput.value = '0';
                    }
                    else {
                        amountInput.value = amount.toString().replace(/\./g, ',');
                    }
                }
            }

            amountOutput.addEventListener('input', updateConvertedInputAmount);
        });

        document.addEventListener('DOMContentLoaded', async function () {
            const amountInput = document.getElementById('token-amount');
            const amountOutput = document.getElementById('token-amount-output');

            async function updateConvertedOutputAmount() {
                if (RESERVE0 === null || RESERVE1 === null) {
                    const reserves = await PAIR_CONTRACT.methods.getReserves().call();
                    RESERVE0 = Number(reserves['_reserve0']) / 1e6;
                    RESERVE1 = Number(reserves['_reserve1']) / 1e18;
                }
                let usdcPrice = RESERVE1 / RESERVE0;
                let amountInputValue = amountInput.value.replace(/,/g, '.');
                if (amountInputValue === '') {
                    amountOutput.value = '';
                }
                else {
                    let amount = (parseFloat(amountInputValue) * usdcPrice).toFixed(18)
                    if (amount == 0) {
                        amountOutput.value = '0';
                    }
                    else {
                        amountOutput.value = amount.toString().replace(/\./g, ',');
                    }
                }
            }

            amountInput.addEventListener('input', updateConvertedOutputAmount);
        });
    </script>
</div>
</body>
</html>
